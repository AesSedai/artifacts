// This file is auto-generated by @hey-api/openapi-ts

export type AchievementSchema = {
    /**
     * Name of the achievement.
     */
    name: string;
    /**
     * Code of the achievement.
     */
    code: string;
    /**
     * Description of the achievement.
     */
    description: string;
    /**
     * Points of the achievement. Used for the leaderboard.
     */
    points: number;
    /**
     * Type of achievement.
     */
    type: 'combat_kill' | 'combat_drop' | 'combat_level' | 'gathering' | 'crafting' | 'recycling' | 'task' | 'other';
    /**
     * Target of the achievement.
     */
    target: string | null;
    /**
     * Total to do.
     */
    total: number;
    /**
     * Current progress.
     */
    current: number;
    /**
     * Completed at.
     */
    completed_at: string | null;
};

/**
 * Type of achievement.
 */
export type type = 'combat_kill' | 'combat_drop' | 'combat_level' | 'gathering' | 'crafting' | 'recycling' | 'task' | 'other';

export type ActiveEventSchema = {
    /**
     * Name of the event.
     */
    name: string;
    /**
     * Map of the event.
     */
    map: MapSchema;
    /**
     * Previous map skin.
     */
    previous_skin: string;
    /**
     * Duration in minutes.
     */
    duration: number;
    /**
     * Expiration datetime.
     */
    expiration: string;
    /**
     * Start datetime.
     */
    created_at: string;
};

export type AddAccountSchema = {
    /**
     * Your desired username.
     */
    username: string;
    /**
     * Your password.
     */
    password: string;
    /**
     * Your email.
     */
    email: string;
};

export type AddCharacterSchema = {
    /**
     * Your desired character name. It's unique and all players can see it.
     */
    name: string;
    /**
     * Your desired skin.
     */
    skin: 'men1' | 'men2' | 'men3' | 'women1' | 'women2' | 'women3';
};

/**
 * Your desired skin.
 */
export type skin = 'men1' | 'men2' | 'men3' | 'women1' | 'women2' | 'women3';

export type AnnouncementSchema = {
    /**
     * Announcement text.
     */
    message: string;
    /**
     * Datetime of the announcement.
     */
    created_at?: string;
};

export type BankExtensionSchema = {
    /**
     * Price of the bank extension.
     */
    price: number;
};

export type BankExtensionTransactionResponseSchema = {
    data: BankExtensionTransactionSchema;
};

export type BankExtensionTransactionSchema = {
    /**
     * Cooldown details.
     */
    cooldown: CooldownSchema;
    /**
     * Transaction details.
     */
    transaction: BankExtensionSchema;
    /**
     * Player details.
     */
    character: CharacterSchema;
};

export type BankGoldTransactionResponseSchema = {
    data: BankGoldTransactionSchema;
};

export type BankGoldTransactionSchema = {
    /**
     * Cooldown details.
     */
    cooldown: CooldownSchema;
    /**
     * Bank details.
     */
    bank: GoldSchema;
    /**
     * Player details.
     */
    character: CharacterSchema;
};

export type BankItemTransactionResponseSchema = {
    data: BankItemTransactionSchema;
};

export type BankItemTransactionSchema = {
    /**
     * Cooldown details.
     */
    cooldown: CooldownSchema;
    /**
     * Item details.
     */
    item: ItemSchema;
    /**
     * Items in your banks.
     */
    bank: Array<SimpleItemSchema>;
    /**
     * Player details.
     */
    character: CharacterSchema;
};

export type BankResponseSchema = {
    data: BankSchema;
};

export type BankSchema = {
    /**
     * Maximum slots in your bank.
     */
    slots: number;
    /**
     * Bank expansions.
     */
    expansions: number;
    /**
     * Next expansion cost.
     */
    next_expansion_cost: number;
    /**
     * Quantity of gold in your bank.
     */
    gold: number;
};

export type BaseAchievementSchema = {
    /**
     * Name of the achievement.
     */
    name: string;
    /**
     * Code of the achievement.
     */
    code: string;
    /**
     * Description of the achievement.
     */
    description: string;
    /**
     * Points of the achievement. Used for the leaderboard.
     */
    points: number;
    /**
     * Type of achievement.
     */
    type: 'combat_kill' | 'combat_drop' | 'combat_level' | 'gathering' | 'crafting' | 'recycling' | 'task' | 'other';
    /**
     * Target of the achievement.
     */
    target: string | null;
    /**
     * Total to do.
     */
    total: number;
};

export type BaseachievementResponseSchema = {
    data: BaseAchievementSchema;
};

export type BlockedHitsSchema = {
    /**
     * The amount of fire hits blocked.
     */
    fire: number;
    /**
     * The amount of earth hits blocked.
     */
    earth: number;
    /**
     * The amount of water hits blocked.
     */
    water: number;
    /**
     * The amount of air hits blocked.
     */
    air: number;
    /**
     * The amount of total hits blocked.
     */
    total: number;
};

export type ChangePassword = {
    /**
     * Your password.
     */
    password: string;
};

export type CharacterFightDataSchema = {
    /**
     * Cooldown details.
     */
    cooldown: CooldownSchema;
    /**
     * Fight details.
     */
    fight: FightSchema;
    /**
     * Player details.
     */
    character: CharacterSchema;
};

export type CharacterFightResponseSchema = {
    data: CharacterFightDataSchema;
};

export type CharacterLeaderboardSchema = {
    /**
     * Character name.
     */
    name: string;
    /**
     * Character skin code.
     */
    skin: string;
    /**
     * Achievements points.
     */
    achievements_points: number;
    /**
     * Combat level.
     */
    level: number;
    /**
     * Total XP of your character.
     */
    total_xp: number;
    /**
     * Mining level.
     */
    mining_level: number;
    /**
     * Mining total xp.
     */
    mining_total_xp: number;
    /**
     * Woodcutting level.
     */
    woodcutting_level: number;
    /**
     * Woodcutting total xp.
     */
    woodcutting_total_xp: number;
    /**
     * Fishing level.
     */
    fishing_level: number;
    /**
     * Fishing total xp.
     */
    fishing_total_xp: number;
    /**
     * Weaponcrafting level.
     */
    weaponcrafting_level: number;
    /**
     * Weaponcrafting total xp.
     */
    weaponcrafting_total_xp: number;
    /**
     * Gearcrafting level.
     */
    gearcrafting_level: number;
    /**
     * Gearcrafting total xp.
     */
    gearcrafting_total_xp: number;
    /**
     * Jewelrycrafting level.
     */
    jewelrycrafting_level: number;
    /**
     * Jewelrycrafting total xp.
     */
    jewelrycrafting_total_xp: number;
    /**
     * Cooking level.
     */
    cooking_level: number;
    /**
     * Cooking total xp.
     */
    cooking_total_xp: number;
    /**
     * The numbers of golds on this character.
     */
    gold: number;
};

export type CharacterMovementDataSchema = {
    /**
     * Cooldown details
     */
    cooldown: CooldownSchema;
    /**
     * Destination details.
     */
    destination: MapSchema;
    /**
     * Character details.
     */
    character: CharacterSchema;
};

export type CharacterMovementResponseSchema = {
    data: CharacterMovementDataSchema;
};

export type CharacterResponseSchema = {
    data: CharacterSchema;
};

export type CharacterSchema = {
    /**
     * Name of the character.
     */
    name: string;
    /**
     * Character skin code.
     */
    skin: 'men1' | 'men2' | 'men3' | 'women1' | 'women2' | 'women3';
    /**
     * Combat level.
     */
    level: number;
    /**
     * The current xp level of the combat level.
     */
    xp: number;
    /**
     * XP required to level up the character.
     */
    max_xp: number;
    /**
     * achievements points.
     */
    achievements_points: number;
    /**
     * The numbers of golds on this character.
     */
    gold: number;
    /**
     * *Not available, on the roadmap. Character movement speed.
     */
    speed: number;
    /**
     * Mining level.
     */
    mining_level: number;
    /**
     * The current xp level of the Mining skill.
     */
    mining_xp: number;
    /**
     * Mining XP required to level up the skill.
     */
    mining_max_xp: number;
    /**
     * Woodcutting level.
     */
    woodcutting_level: number;
    /**
     * The current xp level of the Woodcutting skill.
     */
    woodcutting_xp: number;
    /**
     * Woodcutting XP required to level up the skill.
     */
    woodcutting_max_xp: number;
    /**
     * Fishing level.
     */
    fishing_level: number;
    /**
     * The current xp level of the Fishing skill.
     */
    fishing_xp: number;
    /**
     * Fishing XP required to level up the skill.
     */
    fishing_max_xp: number;
    /**
     * Weaponcrafting level.
     */
    weaponcrafting_level: number;
    /**
     * The current xp level of the Weaponcrafting skill.
     */
    weaponcrafting_xp: number;
    /**
     * Weaponcrafting XP required to level up the skill.
     */
    weaponcrafting_max_xp: number;
    /**
     * Gearcrafting level.
     */
    gearcrafting_level: number;
    /**
     * The current xp level of the Gearcrafting skill.
     */
    gearcrafting_xp: number;
    /**
     * Gearcrafting XP required to level up the skill.
     */
    gearcrafting_max_xp: number;
    /**
     * Jewelrycrafting level.
     */
    jewelrycrafting_level: number;
    /**
     * The current xp level of the Jewelrycrafting skill.
     */
    jewelrycrafting_xp: number;
    /**
     * Jewelrycrafting XP required to level up the skill.
     */
    jewelrycrafting_max_xp: number;
    /**
     * The current xp level of the Cooking skill.
     */
    cooking_level: number;
    /**
     * Cooking XP.
     */
    cooking_xp: number;
    /**
     * Cooking XP required to level up the skill.
     */
    cooking_max_xp: number;
    /**
     * Character HP.
     */
    hp: number;
    /**
     * *Character Haste. Increase speed attack (reduce fight cooldown)
     */
    haste: number;
    /**
     * *Not available, on the roadmap. Character Critical   Strike. Critical strikes increase the attack's damage.
     */
    critical_strike: number;
    /**
     * *Not available, on the roadmap. Regenerates life at the start of each turn.
     */
    stamina: number;
    /**
     * Fire attack.
     */
    attack_fire: number;
    /**
     * Earth attack.
     */
    attack_earth: number;
    /**
     * Water attack.
     */
    attack_water: number;
    /**
     * Air attack.
     */
    attack_air: number;
    /**
     * % Fire damage.
     */
    dmg_fire: number;
    /**
     * % Earth damage.
     */
    dmg_earth: number;
    /**
     * % Water damage.
     */
    dmg_water: number;
    /**
     * % Air damage.
     */
    dmg_air: number;
    /**
     * % Fire resistance.
     */
    res_fire: number;
    /**
     * % Earth resistance.
     */
    res_earth: number;
    /**
     * % Water resistance.
     */
    res_water: number;
    /**
     * % Air resistance.
     */
    res_air: number;
    /**
     * Character x coordinate.
     */
    x: number;
    /**
     * Character y coordinate.
     */
    y: number;
    /**
     * Cooldown in seconds.
     */
    cooldown: number;
    /**
     * Datetime Cooldown expiration.
     */
    cooldown_expiration?: string;
    /**
     * Weapon slot.
     */
    weapon_slot: string;
    /**
     * Shield slot.
     */
    shield_slot: string;
    /**
     * Helmet slot.
     */
    helmet_slot: string;
    /**
     * Body armor slot.
     */
    body_armor_slot: string;
    /**
     * Leg armor slot.
     */
    leg_armor_slot: string;
    /**
     * Boots slot.
     */
    boots_slot: string;
    /**
     * Ring 1 slot.
     */
    ring1_slot: string;
    /**
     * Ring 2 slot.
     */
    ring2_slot: string;
    /**
     * Amulet slot.
     */
    amulet_slot: string;
    /**
     * Artifact 1 slot.
     */
    artifact1_slot: string;
    /**
     * Artifact 2 slot.
     */
    artifact2_slot: string;
    /**
     * Artifact 3 slot.
     */
    artifact3_slot: string;
    /**
     * Consumable 1 slot.
     */
    consumable1_slot: string;
    /**
     * Consumable 1 quantity.
     */
    consumable1_slot_quantity: number;
    /**
     * Consumable 2 slot.
     */
    consumable2_slot: string;
    /**
     * Consumable 2 quantity.
     */
    consumable2_slot_quantity: number;
    /**
     * Task in progress.
     */
    task: string;
    /**
     * Task type.
     */
    task_type: string;
    /**
     * Task progression.
     */
    task_progress: number;
    /**
     * Task total objective.
     */
    task_total: number;
    /**
     * Inventory max items.
     */
    inventory_max_items: number;
    /**
     * List of inventory slots.
     */
    inventory?: Array<InventorySlot>;
};

export type CooldownSchema = {
    /**
     * The total seconds of the cooldown.
     */
    total_seconds: number;
    /**
     * The remaining seconds of the cooldown.
     */
    remaining_seconds: number;
    /**
     * The start of the cooldown.
     */
    started_at: string;
    /**
     * The expiration of the cooldown.
     */
    expiration: string;
    /**
     * The reason of the cooldown.
     */
    reason: 'movement' | 'fight' | 'crafting' | 'gathering' | 'buy_ge' | 'sell_ge' | 'delete_item' | 'deposit_bank' | 'withdraw_bank' | 'equip' | 'unequip' | 'task' | 'recycling';
};

/**
 * The reason of the cooldown.
 */
export type reason = 'movement' | 'fight' | 'crafting' | 'gathering' | 'buy_ge' | 'sell_ge' | 'delete_item' | 'deposit_bank' | 'withdraw_bank' | 'equip' | 'unequip' | 'task' | 'recycling';

export type CraftSchema = {
    /**
     * Skill required to craft the item.
     */
    skill?: 'weaponcrafting' | 'gearcrafting' | 'jewelrycrafting' | 'cooking' | 'woodcutting' | 'mining';
    /**
     * The skill level required to craft the item.
     */
    level?: number;
    /**
     * List of items required to craft the item.
     */
    items?: Array<SimpleItemSchema>;
    /**
     * Quantity of items crafted.
     */
    quantity?: number;
};

/**
 * Skill required to craft the item.
 */
export type skill = 'weaponcrafting' | 'gearcrafting' | 'jewelrycrafting' | 'cooking' | 'woodcutting' | 'mining';

export type CraftingSchema = {
    /**
     * Craft code.
     */
    code: string;
    /**
     * Quantity of items to craft.
     */
    quantity?: number;
};

export type DataPage_AchievementSchema_ = {
    data: Array<AchievementSchema>;
    total: number | null;
    page: number | null;
    size: number | null;
    pages?: number | null;
};

export type DataPage_ActiveEventSchema_ = {
    data: Array<ActiveEventSchema>;
    total: number | null;
    page: number | null;
    size: number | null;
    pages?: number | null;
};

export type DataPage_BaseAchievementSchema_ = {
    data: Array<BaseAchievementSchema>;
    total: number | null;
    page: number | null;
    size: number | null;
    pages?: number | null;
};

export type DataPage_CharacterLeaderboardSchema_ = {
    data: Array<CharacterLeaderboardSchema>;
    total: number | null;
    page: number | null;
    size: number | null;
    pages?: number | null;
};

export type DataPage_CharacterSchema_ = {
    data: Array<CharacterSchema>;
    total: number | null;
    page: number | null;
    size: number | null;
    pages?: number | null;
};

export type DataPage_GEItemSchema_ = {
    data: Array<GEItemSchema>;
    total: number | null;
    page: number | null;
    size: number | null;
    pages?: number | null;
};

export type DataPage_ItemSchema_ = {
    data: Array<ItemSchema>;
    total: number | null;
    page: number | null;
    size: number | null;
    pages?: number | null;
};

export type DataPage_LogSchema_ = {
    data: Array<LogSchema>;
    total: number | null;
    page: number | null;
    size: number | null;
    pages?: number | null;
};

export type DataPage_MapSchema_ = {
    data: Array<MapSchema>;
    total: number | null;
    page: number | null;
    size: number | null;
    pages?: number | null;
};

export type DataPage_MonsterSchema_ = {
    data: Array<MonsterSchema>;
    total: number | null;
    page: number | null;
    size: number | null;
    pages?: number | null;
};

export type DataPage_ResourceSchema_ = {
    data: Array<ResourceSchema>;
    total: number | null;
    page: number | null;
    size: number | null;
    pages?: number | null;
};

export type DataPage_SimpleItemSchema_ = {
    data: Array<SimpleItemSchema>;
    total: number | null;
    page: number | null;
    size: number | null;
    pages?: number | null;
};

export type DeleteCharacterSchema = {
    /**
     * Character name.
     */
    name: string;
};

export type DeleteItemResponseSchema = {
    data: DeleteItemSchema;
};

export type DeleteItemSchema = {
    /**
     * Cooldown details.
     */
    cooldown: CooldownSchema;
    /**
     * Item details.
     */
    item: SimpleItemSchema;
    /**
     * Player details.
     */
    character: CharacterSchema;
};

export type DepositWithdrawGoldSchema = {
    /**
     * Quantity of gold.
     */
    quantity: number;
};

export type DestinationSchema = {
    /**
     * The x coordinate of the destination.
     */
    x: number;
    /**
     * The y coordinate of the destination.
     */
    y: number;
};

export type DropRateSchema = {
    /**
     * Item code.
     */
    code: string;
    /**
     * Chance rate.
     */
    rate: number;
    /**
     * Minimum quantity.
     */
    min_quantity: number;
    /**
     * Maximum quantity.
     */
    max_quantity: number;
};

export type DropSchema = {
    /**
     * The code of the item.
     */
    code: string;
    /**
     * The quantity of the item.
     */
    quantity: number;
};

export type EquipRequestSchema = {
    /**
     * Cooldown details.
     */
    cooldown: CooldownSchema;
    /**
     * Item slot.
     */
    slot: 'weapon' | 'shield' | 'helmet' | 'body_armor' | 'leg_armor' | 'boots' | 'ring1' | 'ring2' | 'amulet' | 'artifact1' | 'artifact2' | 'artifact3' | 'consumable1' | 'consumable2';
    /**
     * Item details.
     */
    item: ItemSchema;
    /**
     * Player details.
     */
    character: CharacterSchema;
};

/**
 * Item slot.
 */
export type slot = 'weapon' | 'shield' | 'helmet' | 'body_armor' | 'leg_armor' | 'boots' | 'ring1' | 'ring2' | 'amulet' | 'artifact1' | 'artifact2' | 'artifact3' | 'consumable1' | 'consumable2';

export type EquipSchema = {
    /**
     * Item code.
     */
    code: string;
    /**
     * Item slot.
     */
    slot: 'weapon' | 'shield' | 'helmet' | 'body_armor' | 'leg_armor' | 'boots' | 'ring1' | 'ring2' | 'amulet' | 'artifact1' | 'artifact2' | 'artifact3' | 'consumable1' | 'consumable2';
    /**
     * Item quantity. Applicable to consumables only.
     */
    quantity?: number;
};

export type EquipmentResponseSchema = {
    data: EquipRequestSchema;
};

export type FightSchema = {
    /**
     * The amount of xp gained by the fight.
     */
    xp: number;
    /**
     * The amount of gold gained by the fight.
     */
    gold: number;
    /**
     * The items dropped by the fight.
     */
    drops: Array<DropSchema>;
    /**
     * Numbers of the turns of the combat.
     */
    turns: number;
    /**
     * The amount of blocked hits by the monster.
     */
    monster_blocked_hits: BlockedHitsSchema;
    /**
     * The amount of blocked hits by the player.
     */
    player_blocked_hits: BlockedHitsSchema;
    /**
     * The fight logs.
     */
    logs: Array<(string)>;
    /**
     * The result of the fight.
     */
    result: 'win' | 'lose';
};

/**
 * The result of the fight.
 */
export type result = 'win' | 'lose';

export type GEItemResponseSchema = {
    data: GEItemSchema;
};

export type GEItemSchema = {
    /**
     * Item code.
     */
    code: string;
    /**
     * Item stock.
     */
    stock: number;
    /**
     * The item's selling price.
     */
    sell_price?: number;
    /**
     * The item's buying price.
     */
    buy_price?: number;
    /**
     * The number of items you can buy or sell at the same time.
     */
    max_quantity: number;
};

export type GETransactionItemSchema = {
    /**
     * Item code.
     */
    code: string;
    /**
     * Item quantity.
     */
    quantity: number;
    /**
     * Item price. Item price validation protects you if the price has changed since you last checked the buy/sale price of an item.
     */
    price: number;
};

export type GETransactionListSchema = {
    /**
     * Cooldown details.
     */
    cooldown: CooldownSchema;
    /**
     * Transaction details.
     */
    transaction: GETransactionSchema;
    /**
     * Character details.
     */
    character: CharacterSchema;
};

export type GETransactionResponseSchema = {
    data: GETransactionListSchema;
};

export type GETransactionSchema = {
    /**
     * Item code.
     */
    code: string;
    /**
     * Item quantity.
     */
    quantity: number;
    /**
     * Item price.
     */
    price: number;
    /**
     * Total price of the transaction.
     */
    total_price: number;
};

export type GoldSchema = {
    /**
     * Quantity of gold.
     */
    quantity: number;
};

export type HTTPValidationError = {
    detail?: Array<ValidationError>;
};

export type InventorySlot = {
    /**
     * Inventory slot identifier.
     */
    slot: number;
    /**
     * Item code.
     */
    code: string;
    /**
     * Quantity in the slot.
     */
    quantity: number;
};

export type ItemEffectSchema = {
    /**
     * Effect name.
     */
    name: string;
    /**
     * Effect value.
     */
    value: number;
};

export type ItemResponseSchema = {
    data: SingleItemSchema;
};

export type ItemSchema = {
    /**
     * Item name.
     */
    name: string;
    /**
     * Item code. This is the item's unique identifier (ID).
     */
    code: string;
    /**
     * Item level.
     */
    level: number;
    /**
     * Item type.
     */
    type: string;
    /**
     * Item subtype.
     */
    subtype: string;
    /**
     * Item description.
     */
    description: string;
    /**
     * List of object effects. For equipment, it will include item stats.
     */
    effects?: Array<ItemEffectSchema>;
    /**
     * Craft information. If applicable.
     */
    craft?: CraftSchema | null;
};

export type LogSchema = {
    /**
     * Character name.
     */
    character: string;
    /**
     * Account character.
     */
    account: string;
    /**
     * Type of action.
     */
    type: string;
    /**
     * Description of action.
     */
    description: string;
    /**
     * Content of action.
     */
    content: unknown;
    /**
     * Cooldown in seconds.
     */
    cooldown: number;
    /**
     * Datetime of cooldown expiration.
     */
    cooldown_expiration: string | null;
    /**
     * Datetime of creation.
     */
    created_at: string;
};

export type MapContentSchema = {
    /**
     * Type of the content.
     */
    type: string;
    /**
     * Code of the content.
     */
    code: string;
};

export type MapResponseSchema = {
    data: MapSchema;
};

export type MapSchema = {
    /**
     * Name of the map.
     */
    name: string;
    /**
     * Skin of the map.
     */
    skin: string;
    /**
     * Position X of the map.
     */
    x: number;
    /**
     * Position Y of the map.
     */
    y: number;
    /**
     * Content of the map.
     */
    content: MapContentSchema | null;
};

export type MonsterResponseSchema = {
    data: MonsterSchema;
};

export type MonsterSchema = {
    /**
     * Name of the monster.
     */
    name: string;
    /**
     * The code of the monster. This is the monster's unique identifier (ID).
     */
    code: string;
    /**
     * Monster level.
     */
    level: number;
    /**
     * Monster hit points.
     */
    hp: number;
    /**
     * Monster fire attack.
     */
    attack_fire: number;
    /**
     * Monster earth attack.
     */
    attack_earth: number;
    /**
     * Monster water attack.
     */
    attack_water: number;
    /**
     * Monster air attack.
     */
    attack_air: number;
    /**
     * Monster % fire resistance.
     */
    res_fire: number;
    /**
     * Monster % earth resistance.
     */
    res_earth: number;
    /**
     * Monster % water resistance.
     */
    res_water: number;
    /**
     * Monster % air resistance.
     */
    res_air: number;
    /**
     * Monster minimum gold drop.
     */
    min_gold: number;
    /**
     * Monster maximum gold drop.
     */
    max_gold: number;
    /**
     * Monster drops. This is a list of items that the monster drops after killing the monster.
     */
    drops: Array<DropRateSchema>;
};

export type MyCharactersListSchema = {
    /**
     * List of your characters.
     */
    data: Array<CharacterSchema>;
};

export type RecyclingDataSchema = {
    /**
     * Cooldown details.
     */
    cooldown: CooldownSchema;
    /**
     * Craft details.
     */
    details: RecyclingItemsSchema;
    /**
     * Player details.
     */
    character: CharacterSchema;
};

export type RecyclingItemsSchema = {
    /**
     * Objects received.
     */
    items: Array<DropSchema>;
};

export type RecyclingResponseSchema = {
    data: RecyclingDataSchema;
};

export type RecyclingSchema = {
    /**
     * Item code.
     */
    code: string;
    /**
     * Quantity of items to recycle.
     */
    quantity?: number;
};

export type ResourceResponseSchema = {
    data: ResourceSchema;
};

export type ResourceSchema = {
    /**
     * The name of the resource
     */
    name: string;
    /**
     * The code of the resource. This is the resource's unique identifier (ID).
     */
    code: string;
    /**
     * The skill required to gather this resource.
     */
    skill: 'mining' | 'woodcutting' | 'fishing';
    /**
     * The skill level required to gather this resource.
     */
    level: number;
    /**
     * The drops of this resource.
     */
    drops: Array<DropRateSchema>;
};

/**
 * The skill required to gather this resource.
 */
export type skill2 = 'mining' | 'woodcutting' | 'fishing';

export type ResponseSchema = {
    message: string;
};

export type SimpleItemSchema = {
    /**
     * Item code.
     */
    code: string;
    /**
     * Item quantity.
     */
    quantity: number;
};

export type SingleItemSchema = {
    /**
     * Item information.
     */
    item: ItemSchema;
    /**
     * Grand Exchange information. If applicable.
     */
    ge?: GEItemSchema | null;
};

export type SkillDataSchema = {
    /**
     * Cooldown details.
     */
    cooldown: CooldownSchema;
    /**
     * Craft details.
     */
    details: SkillInfoSchema;
    /**
     * Player details.
     */
    character: CharacterSchema;
};

export type SkillInfoSchema = {
    /**
     * The amount of xp gained.
     */
    xp: number;
    /**
     * Objects received.
     */
    items: Array<DropSchema>;
};

export type SkillResponseSchema = {
    data: SkillDataSchema;
};

export type StatusResponseSchema = {
    data: StatusSchema;
};

export type StatusSchema = {
    /**
     * Server status
     */
    status: string;
    version?: string;
    /**
     * Maximum level.
     */
    max_level: number;
    /**
     * Characters online.
     */
    characters_online: number;
    /**
     * Server time.
     */
    server_time: string;
    /**
     * Server announcements.
     */
    announcements: Array<AnnouncementSchema>;
    /**
     * Last server wipe.
     */
    last_wipe: string;
    /**
     * Next server wipe.
     */
    next_wipe: string;
};

export type TaskCancelledResponseSchema = {
    data: TaskCancelledSchema;
};

export type TaskCancelledSchema = {
    /**
     * Cooldown details.
     */
    cooldown: CooldownSchema;
    /**
     * Player details.
     */
    character: CharacterSchema;
};

export type TaskDataSchema = {
    /**
     * Cooldown details.
     */
    cooldown: CooldownSchema;
    /**
     * Task details.
     */
    task: TaskSchema;
    /**
     * Player details.
     */
    character: CharacterSchema;
};

export type TaskResponseSchema = {
    data: TaskDataSchema;
};

export type TaskRewardDataSchema = {
    /**
     * Cooldown details.
     */
    cooldown: CooldownSchema;
    /**
     * Reward details.
     */
    reward: TaskRewardSchema;
    /**
     * Player details.
     */
    character: CharacterSchema;
};

export type TaskRewardResponseSchema = {
    data: TaskRewardDataSchema;
};

export type TaskRewardSchema = {
    /**
     * Item code.
     */
    code: string;
    /**
     * Item quantity.
     */
    quantity: number;
};

export type TaskSchema = {
    /**
     * Task objective.
     */
    code: string;
    /**
     * The type of task.
     */
    type: 'monsters' | 'resources' | 'crafts';
    /**
     * The total required to complete the task.
     */
    total: number;
};

/**
 * The type of task.
 */
export type type2 = 'monsters' | 'resources' | 'crafts';

export type TokenResponseSchema = {
    token: string;
};

export type UnequipSchema = {
    /**
     * Item slot.
     */
    slot: 'weapon' | 'shield' | 'helmet' | 'body_armor' | 'leg_armor' | 'boots' | 'ring1' | 'ring2' | 'amulet' | 'artifact1' | 'artifact2' | 'artifact3' | 'consumable1' | 'consumable2';
    /**
     * Item quantity. Applicable to consumables only.
     */
    quantity?: number;
};

export type ValidationError = {
    loc: Array<(string | number)>;
    msg: string;
    type: string;
};

export type ActionMoveMyNameActionMovePostData = {
    /**
     * Name of your character.
     */
    name: string;
    requestBody: DestinationSchema;
};

export type ActionMoveMyNameActionMovePostResponse = CharacterMovementResponseSchema;

export type ActionEquipItemMyNameActionEquipPostData = {
    /**
     * Name of your character.
     */
    name: string;
    requestBody: EquipSchema;
};

export type ActionEquipItemMyNameActionEquipPostResponse = EquipmentResponseSchema;

export type ActionUnequipItemMyNameActionUnequipPostData = {
    /**
     * Name of your character.
     */
    name: string;
    requestBody: UnequipSchema;
};

export type ActionUnequipItemMyNameActionUnequipPostResponse = EquipmentResponseSchema;

export type ActionFightMyNameActionFightPostData = {
    /**
     * Name of your character.
     */
    name: string;
};

export type ActionFightMyNameActionFightPostResponse = CharacterFightResponseSchema;

export type ActionGatheringMyNameActionGatheringPostData = {
    /**
     * Name of your character.
     */
    name: string;
};

export type ActionGatheringMyNameActionGatheringPostResponse = SkillResponseSchema;

export type ActionCraftingMyNameActionCraftingPostData = {
    /**
     * Name of your character.
     */
    name: string;
    requestBody: CraftingSchema;
};

export type ActionCraftingMyNameActionCraftingPostResponse = SkillResponseSchema;

export type ActionDepositBankMyNameActionBankDepositPostData = {
    /**
     * Name of your character.
     */
    name: string;
    requestBody: SimpleItemSchema;
};

export type ActionDepositBankMyNameActionBankDepositPostResponse = BankItemTransactionResponseSchema;

export type ActionDepositBankGoldMyNameActionBankDepositGoldPostData = {
    /**
     * Name of your character.
     */
    name: string;
    requestBody: DepositWithdrawGoldSchema;
};

export type ActionDepositBankGoldMyNameActionBankDepositGoldPostResponse = BankGoldTransactionResponseSchema;

export type ActionRecyclingMyNameActionRecyclingPostData = {
    /**
     * Name of your character.
     */
    name: string;
    requestBody: RecyclingSchema;
};

export type ActionRecyclingMyNameActionRecyclingPostResponse = RecyclingResponseSchema;

export type ActionWithdrawBankMyNameActionBankWithdrawPostData = {
    /**
     * Name of your character.
     */
    name: string;
    requestBody: SimpleItemSchema;
};

export type ActionWithdrawBankMyNameActionBankWithdrawPostResponse = BankItemTransactionResponseSchema;

export type ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostData = {
    /**
     * Name of your character.
     */
    name: string;
    requestBody: DepositWithdrawGoldSchema;
};

export type ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostResponse = BankGoldTransactionResponseSchema;

export type ActionGeBuyItemMyNameActionGeBuyPostData = {
    /**
     * Name of your character.
     */
    name: string;
    requestBody: GETransactionItemSchema;
};

export type ActionGeBuyItemMyNameActionGeBuyPostResponse = GETransactionResponseSchema;

export type ActionGeSellItemMyNameActionGeSellPostData = {
    /**
     * Name of your character.
     */
    name: string;
    requestBody: GETransactionItemSchema;
};

export type ActionGeSellItemMyNameActionGeSellPostResponse = GETransactionResponseSchema;

export type ActionBuyBankExpansionMyNameActionBankBuyExpansionPostData = {
    /**
     * Name of your character.
     */
    name: string;
};

export type ActionBuyBankExpansionMyNameActionBankBuyExpansionPostResponse = BankExtensionTransactionResponseSchema;

export type ActionAcceptNewTaskMyNameActionTaskNewPostData = {
    /**
     * Name of your character.
     */
    name: string;
};

export type ActionAcceptNewTaskMyNameActionTaskNewPostResponse = TaskResponseSchema;

export type ActionCompleteTaskMyNameActionTaskCompletePostData = {
    /**
     * Name of your character.
     */
    name: string;
};

export type ActionCompleteTaskMyNameActionTaskCompletePostResponse = TaskRewardResponseSchema;

export type ActionTaskExchangeMyNameActionTaskExchangePostData = {
    /**
     * Name of your character.
     */
    name: string;
};

export type ActionTaskExchangeMyNameActionTaskExchangePostResponse = TaskRewardResponseSchema;

export type ActionTaskCancelMyNameActionTaskCancelPostData = {
    /**
     * Name of your character.
     */
    name: string;
};

export type ActionTaskCancelMyNameActionTaskCancelPostResponse = TaskCancelledResponseSchema;

export type ActionDeleteItemMyNameActionDeletePostData = {
    /**
     * Name of your character.
     */
    name: string;
    requestBody: SimpleItemSchema;
};

export type ActionDeleteItemMyNameActionDeletePostResponse = DeleteItemResponseSchema;

export type GetAllCharactersLogsMyLogsGetData = {
    /**
     * Page number
     */
    page?: number;
    /**
     * Page size
     */
    size?: number;
};

export type GetAllCharactersLogsMyLogsGetResponse = DataPage_LogSchema_;

export type GetMyCharactersMyCharactersGetResponse = MyCharactersListSchema;

export type GetBankDetailsMyBankGetResponse = BankResponseSchema;

export type GetBankItemsMyBankItemsGetData = {
    /**
     * Item to search in your bank.
     */
    itemCode?: string;
    /**
     * Page number
     */
    page?: number;
    /**
     * Page size
     */
    size?: number;
};

export type GetBankItemsMyBankItemsGetResponse = DataPage_SimpleItemSchema_;

export type ChangePasswordMyChangePasswordPostData = {
    requestBody: ChangePassword;
};

export type ChangePasswordMyChangePasswordPostResponse = ResponseSchema;

export type CreateCharacterCharactersCreatePostData = {
    requestBody: AddCharacterSchema;
};

export type CreateCharacterCharactersCreatePostResponse = CharacterResponseSchema;

export type DeleteCharacterCharactersDeletePostData = {
    requestBody: DeleteCharacterSchema;
};

export type DeleteCharacterCharactersDeletePostResponse = CharacterResponseSchema;

export type GetAllCharactersCharactersGetData = {
    /**
     * Page number
     */
    page?: number;
    /**
     * Page size
     */
    size?: number;
};

export type GetAllCharactersCharactersGetResponse = DataPage_CharacterSchema_;

export type GetCharacterCharactersNameGetData = {
    /**
     * The character name.
     */
    name: string;
};

export type GetCharacterCharactersNameGetResponse = CharacterResponseSchema;

export type GetCharacterAchievementsCharactersNameAchievementsGetData = {
    /**
     * Filter by completed achievements.
     */
    completed?: boolean;
    /**
     * The character name.
     */
    name: string;
    /**
     * Page number
     */
    page?: number;
    /**
     * Page size
     */
    size?: number;
    /**
     * Type of achievements.
     */
    type?: 'combat_kill' | 'combat_drop' | 'combat_level' | 'gathering' | 'crafting' | 'recycling' | 'task' | 'other';
};

export type GetCharacterAchievementsCharactersNameAchievementsGetResponse = DataPage_AchievementSchema_;

export type GetAllMapsMapsGetData = {
    /**
     * Content code on the map.
     */
    contentCode?: string;
    /**
     * Type of content on the map.
     */
    contentType?: 'monster' | 'resource' | 'workshop' | 'bank' | 'grand_exchange' | 'tasks_master';
    /**
     * Page number
     */
    page?: number;
    /**
     * Page size
     */
    size?: number;
};

export type GetAllMapsMapsGetResponse = DataPage_MapSchema_;

export type GetMapMapsXyGetData = {
    /**
     * The position x of the map.
     */
    x: number;
    /**
     * The position X of the map.
     */
    y: number;
};

export type GetMapMapsXyGetResponse = MapResponseSchema;

export type GetAllItemsItemsGetData = {
    /**
     * Item code of items used as material for crafting.
     */
    craftMaterial?: string;
    /**
     * Skill to craft items.
     */
    craftSkill?: 'weaponcrafting' | 'gearcrafting' | 'jewelrycrafting' | 'cooking' | 'woodcutting' | 'mining';
    /**
     * Maximum level items.
     */
    maxLevel?: number;
    /**
     * Minimum level items.
     */
    minLevel?: number;
    /**
     * Name of the item.
     */
    name?: string;
    /**
     * Page number
     */
    page?: number;
    /**
     * Page size
     */
    size?: number;
    /**
     * Type of items.
     */
    type?: 'consumable' | 'body_armor' | 'weapon' | 'resource' | 'leg_armor' | 'helmet' | 'boots' | 'shield' | 'amulet' | 'ring' | 'artifact';
};

export type GetAllItemsItemsGetResponse = DataPage_ItemSchema_;

export type GetItemItemsCodeGetData = {
    /**
     * The code of the item.
     */
    code: string;
};

export type GetItemItemsCodeGetResponse = ItemResponseSchema;

export type GetAllMonstersMonstersGetData = {
    /**
     * Item code of the drop.
     */
    drop?: string;
    /**
     * Monster maximum level.
     */
    maxLevel?: number;
    /**
     * Monster minimum level.
     */
    minLevel?: number;
    /**
     * Page number
     */
    page?: number;
    /**
     * Page size
     */
    size?: number;
};

export type GetAllMonstersMonstersGetResponse = DataPage_MonsterSchema_;

export type GetMonsterMonstersCodeGetData = {
    /**
     * The code of the monster.
     */
    code: string;
};

export type GetMonsterMonstersCodeGetResponse = MonsterResponseSchema;

export type GetAllResourcesResourcesGetData = {
    /**
     * Item code of the drop.
     */
    drop?: string;
    /**
     * Skill maximum level.
     */
    maxLevel?: number;
    /**
     * Skill minimum level.
     */
    minLevel?: number;
    /**
     * Page number
     */
    page?: number;
    /**
     * Page size
     */
    size?: number;
    /**
     * The code of the skill.
     */
    skill?: 'mining' | 'woodcutting' | 'fishing';
};

export type GetAllResourcesResourcesGetResponse = DataPage_ResourceSchema_;

export type GetResourceResourcesCodeGetData = {
    /**
     * The code of the resource.
     */
    code: string;
};

export type GetResourceResourcesCodeGetResponse = ResourceResponseSchema;

export type GetAllEventsEventsGetData = {
    /**
     * Page number
     */
    page?: number;
    /**
     * Page size
     */
    size?: number;
};

export type GetAllEventsEventsGetResponse = DataPage_ActiveEventSchema_;

export type GetAllGeItemsGeGetData = {
    /**
     * Page number
     */
    page?: number;
    /**
     * Page size
     */
    size?: number;
};

export type GetAllGeItemsGeGetResponse = DataPage_GEItemSchema_;

export type GetGeItemGeCodeGetData = {
    /**
     * The code of the item.
     */
    code: string;
};

export type GetGeItemGeCodeGetResponse = GEItemResponseSchema;

export type GetAllAchievementsAchievementsGetData = {
    /**
     * Page number
     */
    page?: number;
    /**
     * Page size
     */
    size?: number;
    /**
     * Type of achievements.
     */
    type?: 'combat_kill' | 'combat_drop' | 'combat_level' | 'gathering' | 'crafting' | 'recycling' | 'task' | 'other';
};

export type GetAllAchievementsAchievementsGetResponse = DataPage_BaseAchievementSchema_;

export type GetAchievementAchievementsCodeGetData = {
    /**
     * The code of the achievement.
     */
    code: string;
};

export type GetAchievementAchievementsCodeGetResponse = BaseachievementResponseSchema;

export type GetLeaderboardLeaderboardGetData = {
    /**
     * Page number
     */
    page?: number;
    /**
     * Page size
     */
    size?: number;
    /**
     * Default sort by combat total XP.
     */
    sort?: 'combat' | 'woodcutting' | 'mining' | 'fishing' | 'weaponcrafting' | 'gearcrafting' | 'jewelrycrafting' | 'cooking' | 'achievements_points' | 'gold';
};

export type GetLeaderboardLeaderboardGetResponse = DataPage_CharacterLeaderboardSchema_;

export type CreateAccountAccountsCreatePostData = {
    requestBody: AddAccountSchema;
};

export type CreateAccountAccountsCreatePostResponse = ResponseSchema;

export type GenerateTokenTokenPostResponse = TokenResponseSchema;

export type GetStatusGetResponse = StatusResponseSchema;

export type $OpenApiTs = {
    '/my/{name}/action/move': {
        post: {
            req: ActionMoveMyNameActionMovePostData;
            res: {
                /**
                 * The character has moved successfully.
                 */
                200: CharacterMovementResponseSchema;
                /**
                 * Map not found.
                 */
                404: unknown;
                /**
                 * An action is already in progress by your character.
                 */
                486: unknown;
                /**
                 * Character already at destination.
                 */
                490: unknown;
                /**
                 * Character not found.
                 */
                498: unknown;
                /**
                 * Character in cooldown.
                 */
                499: unknown;
            };
        };
    };
    '/my/{name}/action/equip': {
        post: {
            req: ActionEquipItemMyNameActionEquipPostData;
            res: {
                /**
                 * The item has been successfully equipped on your character.
                 */
                200: EquipmentResponseSchema;
                /**
                 * Item not found.
                 */
                404: unknown;
                /**
                 * Missing item or insufficient quantity.
                 */
                478: unknown;
                /**
                 * Character can't equip more than 100 consumables in the same slot.
                 */
                484: unknown;
                /**
                 * This item is already equipped.
                 */
                485: unknown;
                /**
                 * An action is already in progress by your character.
                 */
                486: unknown;
                /**
                 * Slot is not empty.
                 */
                491: unknown;
                /**
                 * Character level is insufficient.
                 */
                496: unknown;
                /**
                 * Character not found.
                 */
                498: unknown;
                /**
                 * Character in cooldown.
                 */
                499: unknown;
            };
        };
    };
    '/my/{name}/action/unequip': {
        post: {
            req: ActionUnequipItemMyNameActionUnequipPostData;
            res: {
                /**
                 * The item has been successfully unequipped and added in his inventory.
                 */
                200: EquipmentResponseSchema;
                /**
                 * Item not found.
                 */
                404: unknown;
                /**
                 * Missing item or insufficient quantity.
                 */
                478: unknown;
                /**
                 * An action is already in progress by your character.
                 */
                486: unknown;
                /**
                 * Slot is empty.
                 */
                491: unknown;
                /**
                 * Character inventory is full.
                 */
                497: unknown;
                /**
                 * Character not found.
                 */
                498: unknown;
                /**
                 * Character in cooldown.
                 */
                499: unknown;
            };
        };
    };
    '/my/{name}/action/fight': {
        post: {
            req: ActionFightMyNameActionFightPostData;
            res: {
                /**
                 * The fight ended successfully.
                 */
                200: CharacterFightResponseSchema;
                /**
                 * An action is already in progress by your character.
                 */
                486: unknown;
                /**
                 * Character inventory is full.
                 */
                497: unknown;
                /**
                 * Character not found.
                 */
                498: unknown;
                /**
                 * Character in cooldown.
                 */
                499: unknown;
                /**
                 * Monster not found on this map.
                 */
                598: unknown;
            };
        };
    };
    '/my/{name}/action/gathering': {
        post: {
            req: ActionGatheringMyNameActionGatheringPostData;
            res: {
                /**
                 * The resource has been successfully gathered.
                 */
                200: SkillResponseSchema;
                /**
                 * An action is already in progress by your character.
                 */
                486: unknown;
                /**
                 * Not skill level required.
                 */
                493: unknown;
                /**
                 * Character inventory is full.
                 */
                497: unknown;
                /**
                 * Character not found.
                 */
                498: unknown;
                /**
                 * Character in cooldown.
                 */
                499: unknown;
                /**
                 * Resource not found on this map.
                 */
                598: unknown;
            };
        };
    };
    '/my/{name}/action/crafting': {
        post: {
            req: ActionCraftingMyNameActionCraftingPostData;
            res: {
                /**
                 * The item was successfully crafted.
                 */
                200: SkillResponseSchema;
                /**
                 * Craft not found.
                 */
                404: unknown;
                /**
                 * Missing item or insufficient quantity.
                 */
                478: unknown;
                /**
                 * An action is already in progress by your character.
                 */
                486: unknown;
                /**
                 * Not skill level required.
                 */
                493: unknown;
                /**
                 * Character inventory is full.
                 */
                497: unknown;
                /**
                 * Character not found.
                 */
                498: unknown;
                /**
                 * Character in cooldown.
                 */
                499: unknown;
                /**
                 * Workshop not found on this map.
                 */
                598: unknown;
            };
        };
    };
    '/my/{name}/action/bank/deposit': {
        post: {
            req: ActionDepositBankMyNameActionBankDepositPostData;
            res: {
                /**
                 * Item successfully deposited in your bank.
                 */
                200: BankItemTransactionResponseSchema;
                /**
                 * Item not found.
                 */
                404: unknown;
                /**
                 * A transaction is already in progress with this item/your golds in your bank.
                 */
                461: unknown;
                /**
                 * Your bank is full.
                 */
                462: unknown;
                /**
                 * Missing item or insufficient quantity.
                 */
                478: unknown;
                /**
                 * An action is already in progress by your character.
                 */
                486: unknown;
                /**
                 * Character not found.
                 */
                498: unknown;
                /**
                 * Character in cooldown.
                 */
                499: unknown;
                /**
                 * Bank not found on this map.
                 */
                598: unknown;
            };
        };
    };
    '/my/{name}/action/bank/deposit/gold': {
        post: {
            req: ActionDepositBankGoldMyNameActionBankDepositGoldPostData;
            res: {
                /**
                 * Golds successfully deposited in your bank.
                 */
                200: BankGoldTransactionResponseSchema;
                /**
                 * A transaction is already in progress with this item/your golds in your bank.
                 */
                461: unknown;
                /**
                 * An action is already in progress by your character.
                 */
                486: unknown;
                /**
                 * Insufficient golds on your character.
                 */
                492: unknown;
                /**
                 * Character not found.
                 */
                498: unknown;
                /**
                 * Character in cooldown.
                 */
                499: unknown;
                /**
                 * Bank not found on this map.
                 */
                598: unknown;
            };
        };
    };
    '/my/{name}/action/recycling': {
        post: {
            req: ActionRecyclingMyNameActionRecyclingPostData;
            res: {
                /**
                 * The items were successfully recycled.
                 */
                200: RecyclingResponseSchema;
                /**
                 * Item not found.
                 */
                404: unknown;
                /**
                 * This item cannot be recycled.
                 */
                473: unknown;
                /**
                 * Missing item or insufficient quantity.
                 */
                478: unknown;
                /**
                 * An action is already in progress by your character.
                 */
                486: unknown;
                /**
                 * Not skill level required.
                 */
                493: unknown;
                /**
                 * Character inventory is full.
                 */
                497: unknown;
                /**
                 * Character not found.
                 */
                498: unknown;
                /**
                 * Character in cooldown.
                 */
                499: unknown;
                /**
                 * Workshop not found on this map.
                 */
                598: unknown;
            };
        };
    };
    '/my/{name}/action/bank/withdraw': {
        post: {
            req: ActionWithdrawBankMyNameActionBankWithdrawPostData;
            res: {
                /**
                 * Item successfully withdraw from your bank.
                 */
                200: BankItemTransactionResponseSchema;
                /**
                 * Item not found.
                 */
                404: unknown;
                /**
                 * A transaction is already in progress with this item/your golds in your bank.
                 */
                461: unknown;
                /**
                 * Missing item or insufficient quantity.
                 */
                478: unknown;
                /**
                 * An action is already in progress by your character.
                 */
                486: unknown;
                /**
                 * Character inventory is full.
                 */
                497: unknown;
                /**
                 * Character not found.
                 */
                498: unknown;
                /**
                 * Character in cooldown.
                 */
                499: unknown;
                /**
                 * Bank not found on this map.
                 */
                598: unknown;
            };
        };
    };
    '/my/{name}/action/bank/withdraw/gold': {
        post: {
            req: ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostData;
            res: {
                /**
                 * Golds successfully withdraw from your bank.
                 */
                200: BankGoldTransactionResponseSchema;
                /**
                 * Insufficient golds in your bank.
                 */
                460: unknown;
                /**
                 * A transaction is already in progress with this item/your golds in your bank.
                 */
                461: unknown;
                /**
                 * An action is already in progress by your character.
                 */
                486: unknown;
                /**
                 * Character not found.
                 */
                498: unknown;
                /**
                 * Character in cooldown.
                 */
                499: unknown;
                /**
                 * Bank not found on this map.
                 */
                598: unknown;
            };
        };
    };
    '/my/{name}/action/ge/buy': {
        post: {
            req: ActionGeBuyItemMyNameActionGeBuyPostData;
            res: {
                /**
                 * Item successfully buy from the Grand Exchange.
                 */
                200: GETransactionResponseSchema;
                /**
                 * You can't buy or sell that many items at the same time.
                 */
                479: unknown;
                /**
                 * No stock for this item.
                 */
                480: unknown;
                /**
                 * No item at this price.
                 */
                482: unknown;
                /**
                 * A transaction is already in progress on this item by a another character.
                 */
                483: unknown;
                /**
                 * An action is already in progress by your character.
                 */
                486: unknown;
                /**
                 * Insufficient golds on your character.
                 */
                492: unknown;
                /**
                 * Character inventory is full.
                 */
                497: unknown;
                /**
                 * Character not found.
                 */
                498: unknown;
                /**
                 * Character in cooldown.
                 */
                499: unknown;
                /**
                 * Grand Exchange not found on this map.
                 */
                598: unknown;
            };
        };
    };
    '/my/{name}/action/ge/sell': {
        post: {
            req: ActionGeSellItemMyNameActionGeSellPostData;
            res: {
                /**
                 * Item successfully sell at the Grand Exchange.
                 */
                200: GETransactionResponseSchema;
                /**
                 * Item not found.
                 */
                404: unknown;
                /**
                 * Missing item or insufficient quantity.
                 */
                478: unknown;
                /**
                 * You can't buy or sell that many items at the same time.
                 */
                479: unknown;
                /**
                 * No item at this price.
                 */
                482: unknown;
                /**
                 * A transaction is already in progress on this item by a another character.
                 */
                483: unknown;
                /**
                 * An action is already in progress by your character.
                 */
                486: unknown;
                /**
                 * Character not found.
                 */
                498: unknown;
                /**
                 * Character in cooldown.
                 */
                499: unknown;
                /**
                 * Grand Exchange not found on this map.
                 */
                598: unknown;
            };
        };
    };
    '/my/{name}/action/bank/buy_expansion': {
        post: {
            req: ActionBuyBankExpansionMyNameActionBankBuyExpansionPostData;
            res: {
                /**
                 * Bank expansion successfully bought.
                 */
                200: BankExtensionTransactionResponseSchema;
                /**
                 * An action is already in progress by your character.
                 */
                486: unknown;
                /**
                 * Insufficient golds on your character.
                 */
                492: unknown;
                /**
                 * Character not found.
                 */
                498: unknown;
                /**
                 * Character in cooldown.
                 */
                499: unknown;
                /**
                 * Bank not found on this map.
                 */
                598: unknown;
            };
        };
    };
    '/my/{name}/action/task/new': {
        post: {
            req: ActionAcceptNewTaskMyNameActionTaskNewPostData;
            res: {
                /**
                 * New task successfully accepted.
                 */
                200: TaskResponseSchema;
                /**
                 * An action is already in progress by your character.
                 */
                486: unknown;
                /**
                 * Character already has a task.
                 */
                489: unknown;
                /**
                 * Character not found.
                 */
                498: unknown;
                /**
                 * Character in cooldown.
                 */
                499: unknown;
                /**
                 * Tasks Master not found on this map.
                 */
                598: unknown;
            };
        };
    };
    '/my/{name}/action/task/complete': {
        post: {
            req: ActionCompleteTaskMyNameActionTaskCompletePostData;
            res: {
                /**
                 * The task has been successfully completed.
                 */
                200: TaskRewardResponseSchema;
                /**
                 * An action is already in progress by your character.
                 */
                486: unknown;
                /**
                 * Character has no task.
                 */
                487: unknown;
                /**
                 * Character has not completed the task.
                 */
                488: unknown;
                /**
                 * Character inventory is full.
                 */
                497: unknown;
                /**
                 * Character not found.
                 */
                498: unknown;
                /**
                 * Character in cooldown.
                 */
                499: unknown;
                /**
                 * Tasks Master not found on this map.
                 */
                598: unknown;
            };
        };
    };
    '/my/{name}/action/task/exchange': {
        post: {
            req: ActionTaskExchangeMyNameActionTaskExchangePostData;
            res: {
                /**
                 * The tasks coins have been successfully exchanged.
                 */
                200: TaskRewardResponseSchema;
                /**
                 * Missing item or insufficient quantity.
                 */
                478: unknown;
                /**
                 * An action is already in progress by your character.
                 */
                486: unknown;
                /**
                 * Character inventory is full.
                 */
                497: unknown;
                /**
                 * Character not found.
                 */
                498: unknown;
                /**
                 * Character in cooldown.
                 */
                499: unknown;
                /**
                 * Tasks Master not found on this map.
                 */
                598: unknown;
            };
        };
    };
    '/my/{name}/action/task/cancel': {
        post: {
            req: ActionTaskCancelMyNameActionTaskCancelPostData;
            res: {
                /**
                 * The task has been successfully cancelled.
                 */
                200: TaskCancelledResponseSchema;
                /**
                 * Missing item or insufficient quantity.
                 */
                478: unknown;
                /**
                 * An action is already in progress by your character.
                 */
                486: unknown;
                /**
                 * Character not found.
                 */
                498: unknown;
                /**
                 * Character in cooldown.
                 */
                499: unknown;
                /**
                 * Tasks Master not found on this map.
                 */
                598: unknown;
            };
        };
    };
    '/my/{name}/action/delete': {
        post: {
            req: ActionDeleteItemMyNameActionDeletePostData;
            res: {
                /**
                 * Item successfully deleted from your character.
                 */
                200: DeleteItemResponseSchema;
                /**
                 * Missing item or insufficient quantity.
                 */
                478: unknown;
                /**
                 * An action is already in progress by your character.
                 */
                486: unknown;
                /**
                 * Character not found.
                 */
                498: unknown;
                /**
                 * Character in cooldown.
                 */
                499: unknown;
            };
        };
    };
    '/my/logs': {
        get: {
            req: GetAllCharactersLogsMyLogsGetData;
            res: {
                /**
                 * Successfully fetched logs.
                 */
                200: DataPage_LogSchema_;
                /**
                 * Logs not found.
                 */
                404: unknown;
                /**
                 * Character not found.
                 */
                498: unknown;
            };
        };
    };
    '/my/characters': {
        get: {
            res: {
                /**
                 * Successfully fetched characters.
                 */
                200: MyCharactersListSchema;
            };
        };
    };
    '/my/bank': {
        get: {
            res: {
                /**
                 * Successfully fetched bank details.
                 */
                200: BankResponseSchema;
            };
        };
    };
    '/my/bank/items': {
        get: {
            req: GetBankItemsMyBankItemsGetData;
            res: {
                /**
                 * Successfully fetched items.
                 */
                200: DataPage_SimpleItemSchema_;
            };
        };
    };
    '/my/change_password': {
        post: {
            req: ChangePasswordMyChangePasswordPostData;
            res: {
                /**
                 * Password changed successfully.
                 */
                200: ResponseSchema;
                /**
                 * Use a different password.
                 */
                458: unknown;
            };
        };
    };
    '/characters/create': {
        post: {
            req: CreateCharacterCharactersCreatePostData;
            res: {
                /**
                 * Successfully created character.
                 */
                200: CharacterResponseSchema;
                /**
                 * Name already used.
                 */
                494: unknown;
                /**
                 * Maximum characters reached on your account.
                 */
                495: unknown;
            };
        };
    };
    '/characters/delete': {
        post: {
            req: DeleteCharacterCharactersDeletePostData;
            res: {
                /**
                 * Successfully deleted character.
                 */
                200: CharacterResponseSchema;
                /**
                 * Character not found.
                 */
                498: unknown;
            };
        };
    };
    '/characters': {
        get: {
            req: GetAllCharactersCharactersGetData;
            res: {
                /**
                 * Successfully fetched characters details.
                 */
                200: DataPage_CharacterSchema_;
            };
        };
    };
    '/characters/{name}': {
        get: {
            req: GetCharacterCharactersNameGetData;
            res: {
                /**
                 * Successfully fetched character.
                 */
                200: CharacterResponseSchema;
                /**
                 * Character not found.
                 */
                404: unknown;
            };
        };
    };
    '/characters/{name}/achievements': {
        get: {
            req: GetCharacterAchievementsCharactersNameAchievementsGetData;
            res: {
                /**
                 * Successfully fetched character.
                 */
                200: DataPage_AchievementSchema_;
                /**
                 * Character not found.
                 */
                404: unknown;
            };
        };
    };
    '/maps': {
        get: {
            req: GetAllMapsMapsGetData;
            res: {
                /**
                 * Successfully fetched maps details.
                 */
                200: DataPage_MapSchema_;
            };
        };
    };
    '/maps/{x}/{y}': {
        get: {
            req: GetMapMapsXyGetData;
            res: {
                /**
                 * Successfully fetched map.
                 */
                200: MapResponseSchema;
                /**
                 * Map not found.
                 */
                404: unknown;
            };
        };
    };
    '/items': {
        get: {
            req: GetAllItemsItemsGetData;
            res: {
                /**
                 * Fetch items details.
                 */
                200: DataPage_ItemSchema_;
            };
        };
    };
    '/items/{code}': {
        get: {
            req: GetItemItemsCodeGetData;
            res: {
                /**
                 * Successfully fetched item.
                 */
                200: ItemResponseSchema;
                /**
                 * Item not found.
                 */
                404: unknown;
            };
        };
    };
    '/monsters': {
        get: {
            req: GetAllMonstersMonstersGetData;
            res: {
                /**
                 * Successfully fetched monsters details.
                 */
                200: DataPage_MonsterSchema_;
            };
        };
    };
    '/monsters/{code}': {
        get: {
            req: GetMonsterMonstersCodeGetData;
            res: {
                /**
                 * Successfully fetched monster.
                 */
                200: MonsterResponseSchema;
                /**
                 * Monster not found.
                 */
                404: unknown;
            };
        };
    };
    '/resources': {
        get: {
            req: GetAllResourcesResourcesGetData;
            res: {
                /**
                 * Successfully fetched resources details.
                 */
                200: DataPage_ResourceSchema_;
            };
        };
    };
    '/resources/{code}': {
        get: {
            req: GetResourceResourcesCodeGetData;
            res: {
                /**
                 * Successfully fetched resource.
                 */
                200: ResourceResponseSchema;
                /**
                 * Resource not found.
                 */
                404: unknown;
            };
        };
    };
    '/events': {
        get: {
            req: GetAllEventsEventsGetData;
            res: {
                /**
                 * Successfully fetched events details.
                 */
                200: DataPage_ActiveEventSchema_;
            };
        };
    };
    '/ge': {
        get: {
            req: GetAllGeItemsGeGetData;
            res: {
                /**
                 * Fetch Grand Exchange items details.
                 */
                200: DataPage_GEItemSchema_;
            };
        };
    };
    '/ge/{code}': {
        get: {
            req: GetGeItemGeCodeGetData;
            res: {
                /**
                 * Successfully fetched Grand Exchange item.
                 */
                200: GEItemResponseSchema;
                /**
                 * Item not found.
                 */
                404: unknown;
            };
        };
    };
    '/achievements': {
        get: {
            req: GetAllAchievementsAchievementsGetData;
            res: {
                /**
                 * Successfully fetched achievements.
                 */
                200: DataPage_BaseAchievementSchema_;
            };
        };
    };
    '/achievements/{code}': {
        get: {
            req: GetAchievementAchievementsCodeGetData;
            res: {
                /**
                 * Successfully fetched achievement.
                 */
                200: BaseachievementResponseSchema;
                /**
                 * achievement not found.
                 */
                404: unknown;
            };
        };
    };
    '/leaderboard': {
        get: {
            req: GetLeaderboardLeaderboardGetData;
            res: {
                /**
                 * Successfully fetched leaderboard.
                 */
                200: DataPage_CharacterLeaderboardSchema_;
            };
        };
    };
    '/accounts/create': {
        post: {
            req: CreateAccountAccountsCreatePostData;
            res: {
                /**
                 * Account created successfully.
                 */
                200: ResponseSchema;
                /**
                 * Username already used.
                 */
                456: unknown;
                /**
                 * Email already used.
                 */
                457: unknown;
            };
        };
    };
    '/token': {
        post: {
            res: {
                /**
                 * Token generated successfully
                 */
                200: TokenResponseSchema;
                /**
                 * Token generation failed.
                 */
                455: unknown;
            };
        };
    };
    '/': {
        get: {
            res: {
                /**
                 * Successful Response
                 */
                200: StatusResponseSchema;
            };
        };
    };
};