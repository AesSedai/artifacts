// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { ActionMoveMyNameActionMovePostData, ActionMoveMyNameActionMovePostResponse, ActionEquipItemMyNameActionEquipPostData, ActionEquipItemMyNameActionEquipPostResponse, ActionUnequipItemMyNameActionUnequipPostData, ActionUnequipItemMyNameActionUnequipPostResponse, ActionFightMyNameActionFightPostData, ActionFightMyNameActionFightPostResponse, ActionGatheringMyNameActionGatheringPostData, ActionGatheringMyNameActionGatheringPostResponse, ActionCraftingMyNameActionCraftingPostData, ActionCraftingMyNameActionCraftingPostResponse, ActionDepositBankMyNameActionBankDepositPostData, ActionDepositBankMyNameActionBankDepositPostResponse, ActionDepositBankGoldMyNameActionBankDepositGoldPostData, ActionDepositBankGoldMyNameActionBankDepositGoldPostResponse, ActionRecyclingMyNameActionRecyclingPostData, ActionRecyclingMyNameActionRecyclingPostResponse, ActionWithdrawBankMyNameActionBankWithdrawPostData, ActionWithdrawBankMyNameActionBankWithdrawPostResponse, ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostData, ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostResponse, ActionGeBuyItemMyNameActionGeBuyPostData, ActionGeBuyItemMyNameActionGeBuyPostResponse, ActionGeSellItemMyNameActionGeSellPostData, ActionGeSellItemMyNameActionGeSellPostResponse, ActionBuyBankExpansionMyNameActionBankBuyExpansionPostData, ActionBuyBankExpansionMyNameActionBankBuyExpansionPostResponse, ActionAcceptNewTaskMyNameActionTaskNewPostData, ActionAcceptNewTaskMyNameActionTaskNewPostResponse, ActionCompleteTaskMyNameActionTaskCompletePostData, ActionCompleteTaskMyNameActionTaskCompletePostResponse, ActionTaskExchangeMyNameActionTaskExchangePostData, ActionTaskExchangeMyNameActionTaskExchangePostResponse, ActionTaskCancelMyNameActionTaskCancelPostData, ActionTaskCancelMyNameActionTaskCancelPostResponse, ActionDeleteItemMyNameActionDeletePostData, ActionDeleteItemMyNameActionDeletePostResponse, GetAllCharactersLogsMyLogsGetData, GetAllCharactersLogsMyLogsGetResponse, GetMyCharactersMyCharactersGetResponse, GetBankDetailsMyBankGetResponse, GetBankItemsMyBankItemsGetData, GetBankItemsMyBankItemsGetResponse, ChangePasswordMyChangePasswordPostData, ChangePasswordMyChangePasswordPostResponse, CreateCharacterCharactersCreatePostData, CreateCharacterCharactersCreatePostResponse, DeleteCharacterCharactersDeletePostData, DeleteCharacterCharactersDeletePostResponse, GetAllCharactersCharactersGetData, GetAllCharactersCharactersGetResponse, GetCharacterCharactersNameGetData, GetCharacterCharactersNameGetResponse, GetCharacterAchievementsCharactersNameAchievementsGetData, GetCharacterAchievementsCharactersNameAchievementsGetResponse, GetAllMapsMapsGetData, GetAllMapsMapsGetResponse, GetMapMapsXyGetData, GetMapMapsXyGetResponse, GetAllItemsItemsGetData, GetAllItemsItemsGetResponse, GetItemItemsCodeGetData, GetItemItemsCodeGetResponse, GetAllMonstersMonstersGetData, GetAllMonstersMonstersGetResponse, GetMonsterMonstersCodeGetData, GetMonsterMonstersCodeGetResponse, GetAllResourcesResourcesGetData, GetAllResourcesResourcesGetResponse, GetResourceResourcesCodeGetData, GetResourceResourcesCodeGetResponse, GetAllEventsEventsGetData, GetAllEventsEventsGetResponse, GetAllGeItemsGeGetData, GetAllGeItemsGeGetResponse, GetGeItemGeCodeGetData, GetGeItemGeCodeGetResponse, GetAllAchievementsAchievementsGetData, GetAllAchievementsAchievementsGetResponse, GetAchievementAchievementsCodeGetData, GetAchievementAchievementsCodeGetResponse, GetLeaderboardLeaderboardGetData, GetLeaderboardLeaderboardGetResponse, CreateAccountAccountsCreatePostData, CreateAccountAccountsCreatePostResponse, GenerateTokenTokenPostResponse, GetStatusGetResponse } from './types.gen';

export class MyCharactersService {
    /**
     * Action Move
     * Moves a character on the map using the map's X and Y position.
     * @param data The data for the request.
     * @param data.name Name of your character.
     * @param data.requestBody
     * @returns CharacterMovementResponseSchema The character has moved successfully.
     * @throws ApiError
     */
    public static actionMoveMyNameActionMovePost(data: ActionMoveMyNameActionMovePostData): CancelablePromise<ActionMoveMyNameActionMovePostResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/my/{name}/action/move',
            path: {
                name: data.name
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                404: 'Map not found.',
                486: 'An action is already in progress by your character.',
                490: 'Character already at destination.',
                498: 'Character not found.',
                499: 'Character in cooldown.'
            }
        });
    }
    
    /**
     * Action Equip Item
     * Equip an item on your character.
     * @param data The data for the request.
     * @param data.name Name of your character.
     * @param data.requestBody
     * @returns EquipmentResponseSchema The item has been successfully equipped on your character.
     * @throws ApiError
     */
    public static actionEquipItemMyNameActionEquipPost(data: ActionEquipItemMyNameActionEquipPostData): CancelablePromise<ActionEquipItemMyNameActionEquipPostResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/my/{name}/action/equip',
            path: {
                name: data.name
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                404: 'Item not found.',
                478: 'Missing item or insufficient quantity.',
                484: "Character can't equip more than 100 consumables in the same slot.",
                485: 'This item is already equipped.',
                486: 'An action is already in progress by your character.',
                491: 'Slot is not empty.',
                496: 'Character level is insufficient.',
                498: 'Character not found.',
                499: 'Character in cooldown.'
            }
        });
    }
    
    /**
     * Action Unequip Item
     * Unequip an item on your character.
     * @param data The data for the request.
     * @param data.name Name of your character.
     * @param data.requestBody
     * @returns EquipmentResponseSchema The item has been successfully unequipped and added in his inventory.
     * @throws ApiError
     */
    public static actionUnequipItemMyNameActionUnequipPost(data: ActionUnequipItemMyNameActionUnequipPostData): CancelablePromise<ActionUnequipItemMyNameActionUnequipPostResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/my/{name}/action/unequip',
            path: {
                name: data.name
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                404: 'Item not found.',
                478: 'Missing item or insufficient quantity.',
                486: 'An action is already in progress by your character.',
                491: 'Slot is empty.',
                497: 'Character inventory is full.',
                498: 'Character not found.',
                499: 'Character in cooldown.'
            }
        });
    }
    
    /**
     * Action Fight
     * Start a fight against a monster on the character's map.
     * @param data The data for the request.
     * @param data.name Name of your character.
     * @returns CharacterFightResponseSchema The fight ended successfully.
     * @throws ApiError
     */
    public static actionFightMyNameActionFightPost(data: ActionFightMyNameActionFightPostData): CancelablePromise<ActionFightMyNameActionFightPostResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/my/{name}/action/fight',
            path: {
                name: data.name
            },
            errors: {
                486: 'An action is already in progress by your character.',
                497: 'Character inventory is full.',
                498: 'Character not found.',
                499: 'Character in cooldown.',
                598: 'Monster not found on this map.'
            }
        });
    }
    
    /**
     * Action Gathering
     * Harvest a resource on the character's map.
     * @param data The data for the request.
     * @param data.name Name of your character.
     * @returns SkillResponseSchema The resource has been successfully gathered.
     * @throws ApiError
     */
    public static actionGatheringMyNameActionGatheringPost(data: ActionGatheringMyNameActionGatheringPostData): CancelablePromise<ActionGatheringMyNameActionGatheringPostResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/my/{name}/action/gathering',
            path: {
                name: data.name
            },
            errors: {
                486: 'An action is already in progress by your character.',
                493: 'Not skill level required.',
                497: 'Character inventory is full.',
                498: 'Character not found.',
                499: 'Character in cooldown.',
                598: 'Resource not found on this map.'
            }
        });
    }
    
    /**
     * Action Crafting
     * Crafting an item. The character must be on a map with a workshop.
     * @param data The data for the request.
     * @param data.name Name of your character.
     * @param data.requestBody
     * @returns SkillResponseSchema The item was successfully crafted.
     * @throws ApiError
     */
    public static actionCraftingMyNameActionCraftingPost(data: ActionCraftingMyNameActionCraftingPostData): CancelablePromise<ActionCraftingMyNameActionCraftingPostResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/my/{name}/action/crafting',
            path: {
                name: data.name
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                404: 'Craft not found.',
                478: 'Missing item or insufficient quantity.',
                486: 'An action is already in progress by your character.',
                493: 'Not skill level required.',
                497: 'Character inventory is full.',
                498: 'Character not found.',
                499: 'Character in cooldown.',
                598: 'Workshop not found on this map.'
            }
        });
    }
    
    /**
     * Action Deposit Bank
     * Deposit an item in a bank on the character's map.
     * @param data The data for the request.
     * @param data.name Name of your character.
     * @param data.requestBody
     * @returns BankItemTransactionResponseSchema Item successfully deposited in your bank.
     * @throws ApiError
     */
    public static actionDepositBankMyNameActionBankDepositPost(data: ActionDepositBankMyNameActionBankDepositPostData): CancelablePromise<ActionDepositBankMyNameActionBankDepositPostResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/my/{name}/action/bank/deposit',
            path: {
                name: data.name
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                404: 'Item not found.',
                461: 'A transaction is already in progress with this item/your golds in your bank.',
                462: 'Your bank is full.',
                478: 'Missing item or insufficient quantity.',
                486: 'An action is already in progress by your character.',
                498: 'Character not found.',
                499: 'Character in cooldown.',
                598: 'Bank not found on this map.'
            }
        });
    }
    
    /**
     * Action Deposit Bank Gold
     * Deposit golds in a bank on the character's map.
     * @param data The data for the request.
     * @param data.name Name of your character.
     * @param data.requestBody
     * @returns BankGoldTransactionResponseSchema Golds successfully deposited in your bank.
     * @throws ApiError
     */
    public static actionDepositBankGoldMyNameActionBankDepositGoldPost(data: ActionDepositBankGoldMyNameActionBankDepositGoldPostData): CancelablePromise<ActionDepositBankGoldMyNameActionBankDepositGoldPostResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/my/{name}/action/bank/deposit/gold',
            path: {
                name: data.name
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                461: 'A transaction is already in progress with this item/your golds in your bank.',
                486: 'An action is already in progress by your character.',
                492: 'Insufficient golds on your character.',
                498: 'Character not found.',
                499: 'Character in cooldown.',
                598: 'Bank not found on this map.'
            }
        });
    }
    
    /**
     * Action Recycling
     * Recyling an item. The character must be on a map with a workshop (only for equipments and weapons).
     * @param data The data for the request.
     * @param data.name Name of your character.
     * @param data.requestBody
     * @returns RecyclingResponseSchema The items were successfully recycled.
     * @throws ApiError
     */
    public static actionRecyclingMyNameActionRecyclingPost(data: ActionRecyclingMyNameActionRecyclingPostData): CancelablePromise<ActionRecyclingMyNameActionRecyclingPostResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/my/{name}/action/recycling',
            path: {
                name: data.name
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                404: 'Item not found.',
                473: 'This item cannot be recycled.',
                478: 'Missing item or insufficient quantity.',
                486: 'An action is already in progress by your character.',
                493: 'Not skill level required.',
                497: 'Character inventory is full.',
                498: 'Character not found.',
                499: 'Character in cooldown.',
                598: 'Workshop not found on this map.'
            }
        });
    }
    
    /**
     * Action Withdraw Bank
     * Take an item from your bank and put it in the character's inventory.
     * @param data The data for the request.
     * @param data.name Name of your character.
     * @param data.requestBody
     * @returns BankItemTransactionResponseSchema Item successfully withdraw from your bank.
     * @throws ApiError
     */
    public static actionWithdrawBankMyNameActionBankWithdrawPost(data: ActionWithdrawBankMyNameActionBankWithdrawPostData): CancelablePromise<ActionWithdrawBankMyNameActionBankWithdrawPostResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/my/{name}/action/bank/withdraw',
            path: {
                name: data.name
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                404: 'Item not found.',
                461: 'A transaction is already in progress with this item/your golds in your bank.',
                478: 'Missing item or insufficient quantity.',
                486: 'An action is already in progress by your character.',
                497: 'Character inventory is full.',
                498: 'Character not found.',
                499: 'Character in cooldown.',
                598: 'Bank not found on this map.'
            }
        });
    }
    
    /**
     * Action Withdraw Bank Gold
     * Withdraw gold from your bank.
     * @param data The data for the request.
     * @param data.name Name of your character.
     * @param data.requestBody
     * @returns BankGoldTransactionResponseSchema Golds successfully withdraw from your bank.
     * @throws ApiError
     */
    public static actionWithdrawBankGoldMyNameActionBankWithdrawGoldPost(data: ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostData): CancelablePromise<ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/my/{name}/action/bank/withdraw/gold',
            path: {
                name: data.name
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                460: 'Insufficient golds in your bank.',
                461: 'A transaction is already in progress with this item/your golds in your bank.',
                486: 'An action is already in progress by your character.',
                498: 'Character not found.',
                499: 'Character in cooldown.',
                598: 'Bank not found on this map.'
            }
        });
    }
    
    /**
     * Action Ge Buy Item
     * Buy an item at the Grand Exchange on the character's map.
     * @param data The data for the request.
     * @param data.name Name of your character.
     * @param data.requestBody
     * @returns GETransactionResponseSchema Item successfully buy from the Grand Exchange.
     * @throws ApiError
     */
    public static actionGeBuyItemMyNameActionGeBuyPost(data: ActionGeBuyItemMyNameActionGeBuyPostData): CancelablePromise<ActionGeBuyItemMyNameActionGeBuyPostResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/my/{name}/action/ge/buy',
            path: {
                name: data.name
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                479: "You can't buy or sell that many items at the same time.",
                480: 'No stock for this item.',
                482: 'No item at this price.',
                483: 'A transaction is already in progress on this item by a another character.',
                486: 'An action is already in progress by your character.',
                492: 'Insufficient golds on your character.',
                497: 'Character inventory is full.',
                498: 'Character not found.',
                499: 'Character in cooldown.',
                598: 'Grand Exchange not found on this map.'
            }
        });
    }
    
    /**
     * Action Ge Sell Item
     * Sell an item at the Grand Exchange on the character's map.
     * @param data The data for the request.
     * @param data.name Name of your character.
     * @param data.requestBody
     * @returns GETransactionResponseSchema Item successfully sell at the Grand Exchange.
     * @throws ApiError
     */
    public static actionGeSellItemMyNameActionGeSellPost(data: ActionGeSellItemMyNameActionGeSellPostData): CancelablePromise<ActionGeSellItemMyNameActionGeSellPostResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/my/{name}/action/ge/sell',
            path: {
                name: data.name
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                404: 'Item not found.',
                478: 'Missing item or insufficient quantity.',
                479: "You can't buy or sell that many items at the same time.",
                482: 'No item at this price.',
                483: 'A transaction is already in progress on this item by a another character.',
                486: 'An action is already in progress by your character.',
                498: 'Character not found.',
                499: 'Character in cooldown.',
                598: 'Grand Exchange not found on this map.'
            }
        });
    }
    
    /**
     * Action Buy Bank Expansion
     * Buy a 20 slots bank expansion.
     * @param data The data for the request.
     * @param data.name Name of your character.
     * @returns BankExtensionTransactionResponseSchema Bank expansion successfully bought.
     * @throws ApiError
     */
    public static actionBuyBankExpansionMyNameActionBankBuyExpansionPost(data: ActionBuyBankExpansionMyNameActionBankBuyExpansionPostData): CancelablePromise<ActionBuyBankExpansionMyNameActionBankBuyExpansionPostResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/my/{name}/action/bank/buy_expansion',
            path: {
                name: data.name
            },
            errors: {
                486: 'An action is already in progress by your character.',
                492: 'Insufficient golds on your character.',
                498: 'Character not found.',
                499: 'Character in cooldown.',
                598: 'Bank not found on this map.'
            }
        });
    }
    
    /**
     * Action Accept New Task
     * Accepting a new task.
     * @param data The data for the request.
     * @param data.name Name of your character.
     * @returns TaskResponseSchema New task successfully accepted.
     * @throws ApiError
     */
    public static actionAcceptNewTaskMyNameActionTaskNewPost(data: ActionAcceptNewTaskMyNameActionTaskNewPostData): CancelablePromise<ActionAcceptNewTaskMyNameActionTaskNewPostResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/my/{name}/action/task/new',
            path: {
                name: data.name
            },
            errors: {
                486: 'An action is already in progress by your character.',
                489: 'Character already has a task.',
                498: 'Character not found.',
                499: 'Character in cooldown.',
                598: 'Tasks Master not found on this map.'
            }
        });
    }
    
    /**
     * Action Complete Task
     * Complete a task.
     * @param data The data for the request.
     * @param data.name Name of your character.
     * @returns TaskRewardResponseSchema The task has been successfully completed.
     * @throws ApiError
     */
    public static actionCompleteTaskMyNameActionTaskCompletePost(data: ActionCompleteTaskMyNameActionTaskCompletePostData): CancelablePromise<ActionCompleteTaskMyNameActionTaskCompletePostResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/my/{name}/action/task/complete',
            path: {
                name: data.name
            },
            errors: {
                486: 'An action is already in progress by your character.',
                487: 'Character has no task.',
                488: 'Character has not completed the task.',
                497: 'Character inventory is full.',
                498: 'Character not found.',
                499: 'Character in cooldown.',
                598: 'Tasks Master not found on this map.'
            }
        });
    }
    
    /**
     * Action Task Exchange
     * Exchange 3 tasks coins for a random reward. Rewards are exclusive resources for crafting  items.
     * @param data The data for the request.
     * @param data.name Name of your character.
     * @returns TaskRewardResponseSchema The tasks coins have been successfully exchanged.
     * @throws ApiError
     */
    public static actionTaskExchangeMyNameActionTaskExchangePost(data: ActionTaskExchangeMyNameActionTaskExchangePostData): CancelablePromise<ActionTaskExchangeMyNameActionTaskExchangePostResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/my/{name}/action/task/exchange',
            path: {
                name: data.name
            },
            errors: {
                478: 'Missing item or insufficient quantity.',
                486: 'An action is already in progress by your character.',
                497: 'Character inventory is full.',
                498: 'Character not found.',
                499: 'Character in cooldown.',
                598: 'Tasks Master not found on this map.'
            }
        });
    }
    
    /**
     * Action Task Cancel
     * Cancel a task for 1 tasks coin.
     * @param data The data for the request.
     * @param data.name Name of your character.
     * @returns TaskCancelledResponseSchema The task has been successfully cancelled.
     * @throws ApiError
     */
    public static actionTaskCancelMyNameActionTaskCancelPost(data: ActionTaskCancelMyNameActionTaskCancelPostData): CancelablePromise<ActionTaskCancelMyNameActionTaskCancelPostResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/my/{name}/action/task/cancel',
            path: {
                name: data.name
            },
            errors: {
                478: 'Missing item or insufficient quantity.',
                486: 'An action is already in progress by your character.',
                498: 'Character not found.',
                499: 'Character in cooldown.',
                598: 'Tasks Master not found on this map.'
            }
        });
    }
    
    /**
     * Action Delete Item
     * Delete an item from your character's inventory.
     * @param data The data for the request.
     * @param data.name Name of your character.
     * @param data.requestBody
     * @returns DeleteItemResponseSchema Item successfully deleted from your character.
     * @throws ApiError
     */
    public static actionDeleteItemMyNameActionDeletePost(data: ActionDeleteItemMyNameActionDeletePostData): CancelablePromise<ActionDeleteItemMyNameActionDeletePostResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/my/{name}/action/delete',
            path: {
                name: data.name
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                478: 'Missing item or insufficient quantity.',
                486: 'An action is already in progress by your character.',
                498: 'Character not found.',
                499: 'Character in cooldown.'
            }
        });
    }
    
    /**
     * Get All Characters Logs
     * History of the last 100 actions of all your characters.
     * @param data The data for the request.
     * @param data.page Page number
     * @param data.size Page size
     * @returns DataPage_LogSchema_ Successfully fetched logs.
     * @throws ApiError
     */
    public static getAllCharactersLogsMyLogsGet(data: GetAllCharactersLogsMyLogsGetData = {}): CancelablePromise<GetAllCharactersLogsMyLogsGetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/my/logs',
            query: {
                page: data.page,
                size: data.size
            },
            errors: {
                404: 'Logs not found.',
                498: 'Character not found.'
            }
        });
    }
    
    /**
     * Get My Characters
     * List of your characters.
     * @returns MyCharactersListSchema Successfully fetched characters.
     * @throws ApiError
     */
    public static getMyCharactersMyCharactersGet(): CancelablePromise<GetMyCharactersMyCharactersGetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/my/characters'
        });
    }
    
}

export class MyAccountService {
    /**
     * Get Bank Details
     * Fetch bank details.
     * @returns BankResponseSchema Successfully fetched bank details.
     * @throws ApiError
     */
    public static getBankDetailsMyBankGet(): CancelablePromise<GetBankDetailsMyBankGetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/my/bank'
        });
    }
    
    /**
     * Get Bank Items
     * Fetch all items in your bank.
     * @param data The data for the request.
     * @param data.itemCode Item to search in your bank.
     * @param data.page Page number
     * @param data.size Page size
     * @returns DataPage_SimpleItemSchema_ Successfully fetched items.
     * @throws ApiError
     */
    public static getBankItemsMyBankItemsGet(data: GetBankItemsMyBankItemsGetData = {}): CancelablePromise<GetBankItemsMyBankItemsGetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/my/bank/items',
            query: {
                item_code: data.itemCode,
                page: data.page,
                size: data.size
            }
        });
    }
    
    /**
     * Change Password
     * Change your account password. Changing the password reset the account token.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns ResponseSchema Password changed successfully.
     * @throws ApiError
     */
    public static changePasswordMyChangePasswordPost(data: ChangePasswordMyChangePasswordPostData): CancelablePromise<ChangePasswordMyChangePasswordPostResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/my/change_password',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                458: 'Use a different password.'
            }
        });
    }
    
}

export class CharactersService {
    /**
     * Create Character
     * Create new character on your account. You can create up to 5 characters.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns CharacterResponseSchema Successfully created character.
     * @throws ApiError
     */
    public static createCharacterCharactersCreatePost(data: CreateCharacterCharactersCreatePostData): CancelablePromise<CreateCharacterCharactersCreatePostResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/characters/create',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                494: 'Name already used.',
                495: 'Maximum characters reached on your account.'
            }
        });
    }
    
    /**
     * Delete Character
     * Delete character on your account.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns CharacterResponseSchema Successfully deleted character.
     * @throws ApiError
     */
    public static deleteCharacterCharactersDeletePost(data: DeleteCharacterCharactersDeletePostData): CancelablePromise<DeleteCharacterCharactersDeletePostResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/characters/delete',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                498: 'Character not found.'
            }
        });
    }
    
    /**
     * Get All Characters
     * Fetch characters details.
     * @param data The data for the request.
     * @param data.page Page number
     * @param data.size Page size
     * @returns DataPage_CharacterSchema_ Successfully fetched characters details.
     * @throws ApiError
     */
    public static getAllCharactersCharactersGet(data: GetAllCharactersCharactersGetData = {}): CancelablePromise<GetAllCharactersCharactersGetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/characters',
            query: {
                page: data.page,
                size: data.size
            }
        });
    }
    
    /**
     * Get Character
     * Retrieve the details of a character.
     * @param data The data for the request.
     * @param data.name The character name.
     * @returns CharacterResponseSchema Successfully fetched character.
     * @throws ApiError
     */
    public static getCharacterCharactersNameGet(data: GetCharacterCharactersNameGetData): CancelablePromise<GetCharacterCharactersNameGetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/characters/{name}',
            path: {
                name: data.name
            },
            errors: {
                404: 'Character not found.'
            }
        });
    }
    
    /**
     * Get Character Achievements
     * Retrieve the details of a character.
     * @param data The data for the request.
     * @param data.name The character name.
     * @param data.type Type of achievements.
     * @param data.completed Filter by completed achievements.
     * @param data.page Page number
     * @param data.size Page size
     * @returns DataPage_AchievementSchema_ Successfully fetched character.
     * @throws ApiError
     */
    public static getCharacterAchievementsCharactersNameAchievementsGet(data: GetCharacterAchievementsCharactersNameAchievementsGetData): CancelablePromise<GetCharacterAchievementsCharactersNameAchievementsGetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/characters/{name}/achievements',
            path: {
                name: data.name
            },
            query: {
                type: data.type,
                completed: data.completed,
                page: data.page,
                size: data.size
            },
            errors: {
                404: 'Character not found.'
            }
        });
    }
    
}

export class MapsService {
    /**
     * Get All Maps
     * Fetch maps details.
     * @param data The data for the request.
     * @param data.contentType Type of content on the map.
     * @param data.contentCode Content code on the map.
     * @param data.page Page number
     * @param data.size Page size
     * @returns DataPage_MapSchema_ Successfully fetched maps details.
     * @throws ApiError
     */
    public static getAllMapsMapsGet(data: GetAllMapsMapsGetData = {}): CancelablePromise<GetAllMapsMapsGetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/maps',
            query: {
                content_type: data.contentType,
                content_code: data.contentCode,
                page: data.page,
                size: data.size
            }
        });
    }
    
    /**
     * Get Map
     * Retrieve the details of a map.
     * @param data The data for the request.
     * @param data.x The position x of the map.
     * @param data.y The position X of the map.
     * @returns MapResponseSchema Successfully fetched map.
     * @throws ApiError
     */
    public static getMapMapsXYGet(data: GetMapMapsXyGetData): CancelablePromise<GetMapMapsXyGetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/maps/{x}/{y}',
            path: {
                x: data.x,
                y: data.y
            },
            errors: {
                404: 'Map not found.'
            }
        });
    }
    
}

export class ItemsService {
    /**
     * Get All Items
     * Fetch items details.
     * @param data The data for the request.
     * @param data.minLevel Minimum level items.
     * @param data.maxLevel Maximum level items.
     * @param data.name Name of the item.
     * @param data.type Type of items.
     * @param data.craftSkill Skill to craft items.
     * @param data.craftMaterial Item code of items used as material for crafting.
     * @param data.page Page number
     * @param data.size Page size
     * @returns DataPage_ItemSchema_ Fetch items details.
     * @throws ApiError
     */
    public static getAllItemsItemsGet(data: GetAllItemsItemsGetData = {}): CancelablePromise<GetAllItemsItemsGetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/items',
            query: {
                min_level: data.minLevel,
                max_level: data.maxLevel,
                name: data.name,
                type: data.type,
                craft_skill: data.craftSkill,
                craft_material: data.craftMaterial,
                page: data.page,
                size: data.size
            }
        });
    }
    
    /**
     * Get Item
     * Retrieve the details of a item.
     * @param data The data for the request.
     * @param data.code The code of the item.
     * @returns ItemResponseSchema Successfully fetched item.
     * @throws ApiError
     */
    public static getItemItemsCodeGet(data: GetItemItemsCodeGetData): CancelablePromise<GetItemItemsCodeGetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/items/{code}',
            path: {
                code: data.code
            },
            errors: {
                404: 'Item not found.'
            }
        });
    }
    
}

export class MonstersService {
    /**
     * Get All Monsters
     * Fetch monsters details.
     * @param data The data for the request.
     * @param data.minLevel Monster minimum level.
     * @param data.maxLevel Monster maximum level.
     * @param data.drop Item code of the drop.
     * @param data.page Page number
     * @param data.size Page size
     * @returns DataPage_MonsterSchema_ Successfully fetched monsters details.
     * @throws ApiError
     */
    public static getAllMonstersMonstersGet(data: GetAllMonstersMonstersGetData = {}): CancelablePromise<GetAllMonstersMonstersGetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/monsters',
            query: {
                min_level: data.minLevel,
                max_level: data.maxLevel,
                drop: data.drop,
                page: data.page,
                size: data.size
            }
        });
    }
    
    /**
     * Get Monster
     * Retrieve the details of a monster.
     * @param data The data for the request.
     * @param data.code The code of the monster.
     * @returns MonsterResponseSchema Successfully fetched monster.
     * @throws ApiError
     */
    public static getMonsterMonstersCodeGet(data: GetMonsterMonstersCodeGetData): CancelablePromise<GetMonsterMonstersCodeGetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/monsters/{code}',
            path: {
                code: data.code
            },
            errors: {
                404: 'Monster not found.'
            }
        });
    }
    
}

export class ResourcesService {
    /**
     * Get All Resources
     * Fetch resources details.
     * @param data The data for the request.
     * @param data.minLevel Skill minimum level.
     * @param data.maxLevel Skill maximum level.
     * @param data.skill The code of the skill.
     * @param data.drop Item code of the drop.
     * @param data.page Page number
     * @param data.size Page size
     * @returns DataPage_ResourceSchema_ Successfully fetched resources details.
     * @throws ApiError
     */
    public static getAllResourcesResourcesGet(data: GetAllResourcesResourcesGetData = {}): CancelablePromise<GetAllResourcesResourcesGetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/resources',
            query: {
                min_level: data.minLevel,
                max_level: data.maxLevel,
                skill: data.skill,
                drop: data.drop,
                page: data.page,
                size: data.size
            }
        });
    }
    
    /**
     * Get Resource
     * Retrieve the details of a resource.
     * @param data The data for the request.
     * @param data.code The code of the resource.
     * @returns ResourceResponseSchema Successfully fetched resource.
     * @throws ApiError
     */
    public static getResourceResourcesCodeGet(data: GetResourceResourcesCodeGetData): CancelablePromise<GetResourceResourcesCodeGetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/resources/{code}',
            path: {
                code: data.code
            },
            errors: {
                404: 'Resource not found.'
            }
        });
    }
    
}

export class EventsService {
    /**
     * Get All Events
     * Fetch events details.
     * @param data The data for the request.
     * @param data.page Page number
     * @param data.size Page size
     * @returns DataPage_ActiveEventSchema_ Successfully fetched events details.
     * @throws ApiError
     */
    public static getAllEventsEventsGet(data: GetAllEventsEventsGetData = {}): CancelablePromise<GetAllEventsEventsGetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/events',
            query: {
                page: data.page,
                size: data.size
            }
        });
    }
    
}

export class GrandExchangeService {
    /**
     * Get All Ge Items
     * Fetch Grand Exchange items details.
     * @param data The data for the request.
     * @param data.page Page number
     * @param data.size Page size
     * @returns DataPage_GEItemSchema_ Fetch Grand Exchange items details.
     * @throws ApiError
     */
    public static getAllGeItemsGeGet(data: GetAllGeItemsGeGetData = {}): CancelablePromise<GetAllGeItemsGeGetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/ge',
            query: {
                page: data.page,
                size: data.size
            }
        });
    }
    
    /**
     * Get Ge Item
     * Retrieve the details of a Grand Exchange item.
     * @param data The data for the request.
     * @param data.code The code of the item.
     * @returns GEItemResponseSchema Successfully fetched Grand Exchange item.
     * @throws ApiError
     */
    public static getGeItemGeCodeGet(data: GetGeItemGeCodeGetData): CancelablePromise<GetGeItemGeCodeGetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/ge/{code}',
            path: {
                code: data.code
            },
            errors: {
                404: 'Item not found.'
            }
        });
    }
    
}

export class AchievementsService {
    /**
     * Get All Achievements
     * List of all achievements.
     * @param data The data for the request.
     * @param data.type Type of achievements.
     * @param data.page Page number
     * @param data.size Page size
     * @returns DataPage_BaseAchievementSchema_ Successfully fetched achievements.
     * @throws ApiError
     */
    public static getAllAchievementsAchievementsGet(data: GetAllAchievementsAchievementsGetData = {}): CancelablePromise<GetAllAchievementsAchievementsGetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/achievements',
            query: {
                type: data.type,
                page: data.page,
                size: data.size
            }
        });
    }
    
    /**
     * Get Achievement
     * Retrieve the details of a achievement.
     * @param data The data for the request.
     * @param data.code The code of the achievement.
     * @returns BaseachievementResponseSchema Successfully fetched achievement.
     * @throws ApiError
     */
    public static getAchievementAchievementsCodeGet(data: GetAchievementAchievementsCodeGetData): CancelablePromise<GetAchievementAchievementsCodeGetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/achievements/{code}',
            path: {
                code: data.code
            },
            errors: {
                404: 'achievement not found.'
            }
        });
    }
    
}

export class LeaderboardService {
    /**
     * Get Leaderboard
     * Fetch leaderboard details.
     * @param data The data for the request.
     * @param data.sort Default sort by combat total XP.
     * @param data.page Page number
     * @param data.size Page size
     * @returns DataPage_CharacterLeaderboardSchema_ Successfully fetched leaderboard.
     * @throws ApiError
     */
    public static getLeaderboardLeaderboardGet(data: GetLeaderboardLeaderboardGetData = {}): CancelablePromise<GetLeaderboardLeaderboardGetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/leaderboard',
            query: {
                sort: data.sort,
                page: data.page,
                size: data.size
            }
        });
    }
    
}

export class AccountsService {
    /**
     * Create Account
     * Create an account.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns ResponseSchema Account created successfully.
     * @throws ApiError
     */
    public static createAccountAccountsCreatePost(data: CreateAccountAccountsCreatePostData): CancelablePromise<CreateAccountAccountsCreatePostResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/accounts/create',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                456: 'Username already used.',
                457: 'Email already used.'
            }
        });
    }
    
}

export class TokenService {
    /**
     * Generate Token
     * Use your account as HTTPBasic Auth to generate your token to use the API. You can also generate your token directly on the website.
     * @returns TokenResponseSchema Token generated successfully
     * @throws ApiError
     */
    public static generateTokenTokenPost(): CancelablePromise<GenerateTokenTokenPostResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/token',
            errors: {
                455: 'Token generation failed.'
            }
        });
    }
    
}

export class DefaultService {
    /**
     * Get Status
     * Return the status of the game server.
     * @returns StatusResponseSchema Successful Response
     * @throws ApiError
     */
    public static getStatusGet(): CancelablePromise<GetStatusGetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/'
        });
    }
    
}